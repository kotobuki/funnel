package {	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.net.URLRequest;	import flash.utils.getTimer;	import funnel.*;	public class SimpleToyGuitar extends Sprite {		private const NUM_AIN_CHANNELS:int = 3;		// guitar samples: hiroshi yamato / dropcontrol		private var soundFileName:Array;		private var system:Fio;		private var fio:IOModule;		private var scope:Array;		private var sound:Array;		private var lastTriggered:uint = 0;		private var currentSoundType:int = 0;		private var currentSoundIndex:int = 0;		public function SimpleToyGuitar() {			// 通信トラフィックを最小限にするためにA0〜A2以外を出力に設定する			var config:Configuration = Fio.FIRMATA;			config.setDigitalPinMode(13, OUT);// D13			config.setDigitalPinMode(17, OUT);// A3（ArduinoではA0はD14としてカウントする）			config.setDigitalPinMode(18, OUT);// A4			config.setDigitalPinMode(19, OUT);// A5			config.setDigitalPinMode(20, OUT);// A6			config.setDigitalPinMode(21, OUT);// A7			// 引数：FIOのID、コンフィギュレーション、アドレス、ポート番号、サンプリング間隔			system = new Fio([1], config, "localhost", 9000, 10);			fio = system.ioModule(1);			system.addEventListener(FunnelEvent.READY, trace);			system.addEventListener(FunnelErrorEvent.REBOOT_ERROR, trace);			system.addEventListener(FunnelErrorEvent.CONFIGURATION_ERROR, trace);			system.addEventListener(FunnelErrorEvent.ERROR, trace);			soundFileName = new Array(3);			soundFileName[0] = ["cutting5_1.mp3", "cutting5_2.mp3", "cutting5_3.mp3"];			soundFileName[1] = ["cutting3.mp3"];			soundFileName[2] = ["cutting6.mp3"];			sound = new Array(soundFileName.length);			for (var i:int = 0; i < soundFileName.length; i++) {				sound[i] = new Array(soundFileName[i].length);				for (var j:int = 0; j < soundFileName[i].length; j++) {					sound[i][j] = new Sound(new URLRequest(soundFileName[i][j]));				}			}			scope = new Array(NUM_AIN_CHANNELS);			scope[0] = new SignalScope(12, 12 + (60 * 0), 200, "Light Sensor / 光センサ");			scope[1] = new SignalScope(12, 12 + (60 * 1), 200, "Button 1 / ボタン1");			scope[2] = new SignalScope(12, 12 + (60 * 2), 200, "Button 2 / ボタン2");			addChild(scope[0]);			addChild(scope[1]);			addChild(scope[2]);			// A0に対してSetPointフィルタをセットすると指定した閾値とヒステリシスで光センサの入力を分割してイベントを発生するようになる			// 引数：閾値、ヒステリシス			fio.analogPin(0).filters = [new SetPoint([0.82, 0.05])];			fio.analogPin(0).addEventListener(PinEvent.FALLING_EDGE, picked);			// A1とA2に対してSetPointフィルタをセットするとボタンのオン／オフでイベントを発生するようになる			fio.analogPin(1).filters = [new SetPoint([0.5, 0.1])];			fio.analogPin(1).addEventListener(PinEvent.RISING_EDGE, firstButtonPressed);			fio.analogPin(2).filters = [new SetPoint([0.5, 0.1])];			fio.analogPin(2).addEventListener(PinEvent.RISING_EDGE, secondButtonPressed);			addEventListener(Event.ENTER_FRAME, loop);		}		private function loop(event:Event):void {			for (var i:int = 0; i < NUM_AIN_CHANNELS; i++) {				scope[i].update(fio.analogPin(i));			}		}		private function picked(event:Event):void {			var now:uint = getTimer();			// 最後のトリガーから一定時間以内のトリガーはキャンセルする			// サンプルのテンポは120BPMであるため音符と時間の対応は以下のようになる			// フレーズに応じて最適な時間を設定する			// 全音符：2000ms			// 二分音符：1000ms			// 四分音符：500ms			// 八分音符：250ms			// 十六分音符：125ms			if (now - lastTriggered < 900) {				return;			}			var soundChannel:SoundChannel = sound[currentSoundType][currentSoundIndex].play(0, 1);			lastTriggered = now;			currentSoundIndex = (currentSoundIndex + 1) % soundFileName[currentSoundType].length;			trace("current: " + currentSoundIndex);		}		private function firstButtonPressed(event:Event):void {			currentSoundType = 0;			currentSoundIndex = 0;		}		private function secondButtonPressed(event:Event):void {			currentSoundType = 1;			currentSoundIndex = 0;		}	}}