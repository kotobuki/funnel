package {	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.net.URLRequest;	import flash.utils.getTimer;	import funnel.*;	/**	 * LEDを矩形波でドライブしつつアナログ入力の状態をシンプルなグラフに表示する。	 * Drive a LED with square wave and display analog input as a simple graph.	 *	 * <p>準備<ol>	 * <li>A0にセンサを接続する（例：ボリューム）</li>	 * </ol></p>	 *	 * <p>Preparation<ol>	 * <li>Connect a sensor to A0 (e.g. a potentiometer)</li>	 * </ol></p>	 */	public class SimpleToyGuitar extends Sprite {		// To change number of analog channels, modify this constant		// 表示するアナログチャンネル数を変更するにはこの定数を変更する		private const NUM_AIN_CHANNELS:int = 3;		// Funk Guitars - Funkalicious v1		// http://www.platinumloops.com/detail.php?prod_id=74&cat_id=85&order=name&page=1		private const soundFileName:Array = ["classicfunk120a_e.mp3", "classicfunk120j_b.mp3"];		private var system:Fio;		private var fio:IOModule;		private var scope:Array;		private var sound:Array;		private var isPlaying:Boolean = false;		private var lastTriggered:uint = 0;		private var currentSound:int = 0;		public function SimpleToyGuitar() {			// disable A3-7 to minimize traffic as small as possible			var config:Configuration = Fio.FIRMATA;			config.setDigitalPinMode(13, OUT);// D13			config.setDigitalPinMode(17, OUT);// A3			config.setDigitalPinMode(18, OUT);// A4			config.setDigitalPinMode(19, OUT);// A5			config.setDigitalPinMode(20, OUT);// A6			config.setDigitalPinMode(21, OUT);// A7			system = new Fio([1], config, "localhost", 9000, 33);			fio = system.ioModule(1);			system.addEventListener(FunnelEvent.READY, trace);			system.addEventListener(FunnelErrorEvent.REBOOT_ERROR, trace);			system.addEventListener(FunnelErrorEvent.CONFIGURATION_ERROR, trace);			system.addEventListener(FunnelErrorEvent.ERROR, trace);			var i:int = 0;			sound = new Array(soundFileName.length);			for (i = 0; i < soundFileName.length; i++) {				sound[i] = new Sound(new URLRequest(soundFileName[i]));			}			scope = new Array(NUM_AIN_CHANNELS);			for (i = 0; i < NUM_AIN_CHANNELS; i++) {				scope[i] = new SignalScope(10, 10 + (60 * i), 200);				addChild(scope[i]);			}			fio.analogPin(0).filters = [new SetPoint([0.8, 0.05])];			fio.analogPin(0).addEventListener(PinEvent.FALLING_EDGE, picked);			fio.analogPin(1).filters = [new SetPoint([0.5, 0.1])];			fio.analogPin(1).addEventListener(PinEvent.RISING_EDGE, firstButtonPressed);			fio.analogPin(2).filters = [new SetPoint([0.5, 0.1])];			fio.analogPin(2).addEventListener(PinEvent.RISING_EDGE, secondButtonPressed);			addEventListener(Event.ENTER_FRAME, loop);		}		private function loop(event:Event):void {			for (var i:int = 0; i < NUM_AIN_CHANNELS; i++) {				scope[i].update(fio.analogPin(i));			}		}		private function picked(event:Event):void {			var now:uint = getTimer();			if (now - lastTriggered < 100) {				return;			}			var soundChannel:SoundChannel = sound[currentSound].play(0, 1);			soundChannel.addEventListener(Event.SOUND_COMPLETE, playbackCompleteHandler);			isPlaying = true;			lastTriggered = now;		}		private function firstButtonPressed(event:Event):void {			trace("currentSound: " + currentSound);			currentSound = 0;		}		private function secondButtonPressed(event:Event):void {			trace("currentSound: " + currentSound);			currentSound = 1;		}		private function playbackCompleteHandler(event:Event):void {			isPlaying = false;		}	}}