package {	import flash.display.Sprite;	import flash.events.Event;		import funnel.*;	import funnel.gui.ArduinoGUI;	import funnel.ui.*;	/**	 * ボタンが押されている間LEDをサイン波でドライブする。	 * Drive a LED with sin wave while the button is pressed.	 *	 * <p>準備<ol>	 * <li>D12にスイッチを接続する（プルダウンが必要）</li>	 * <li>D11にLEDを接続する（電流制限のための抵抗器が必要）</li>	 * <li>A0にセンサを接続する（例：ボリューム）</li>	 * </ol></p>	 *	 * <p>Preparation<ol>	 * <li>Connect a button to D12 (should be pulled-down)</li>	 * <li>Connect a LED to D11 (current-limiting resistor is needed)</li>	 * <li>Connect a sensor to A0 (e.g. a potentiometer)</li>	 * </ol></p>	 */	public class ArduinoTest extends Sprite {		// To change number of analog channels, modify this constant		// 表示するアナログチャンネル数を変更するにはこの定数を変更する		private const NUM_CHANNELS:int = 1;		private var aio:Arduino;		private var scopes:Array;		public function ArduinoTest() {			var config:Configuration = Arduino.FIRMATA;			config.setDigitalPinMode(11, PWM);			config.setDigitalPinMode(12, IN);			config.setDigitalPinMode(13, OUT);			aio = new Arduino(config);			aio.addEventListener(FunnelEvent.READY, trace);			aio.addEventListener(FunnelErrorEvent.REBOOT_ERROR, trace);			aio.addEventListener(FunnelErrorEvent.CONFIGURATION_ERROR, trace);			aio.addEventListener(FunnelErrorEvent.ERROR, trace);			scopes = new Array(NUM_CHANNELS);			for (var i:int = 0; i < NUM_CHANNELS; i++) {				scopes[i] = new SignalScope(10, 10 + (60 * i), 200, "A" + i);				addChild(scopes[i]);			}			var gui:ArduinoGUI = new ArduinoGUI();			addChild(gui);			aio.gui = gui;			var button:Button = new Button(aio.digitalPin(12));			var externalLED:LED = new LED(aio.digitalPin(11));			var onBoardLED:LED = new LED(aio.digitalPin(13));			button.addEventListener(ButtonEvent.PRESS, function(e:Event):void {				onBoardLED.on();				externalLED.blink(1000, 0, Osc.SIN);			});			button.addEventListener(ButtonEvent.RELEASE, function(e:Event):void {				onBoardLED.off();				externalLED.stopBlinking();			});			aio.analogPin(0).addFilter(new Convolution(Convolution.MOVING_AVERAGE));			addEventListener(Event.ENTER_FRAME, loop);		}		private function loop(event:Event):void {			for (var i:int = 0; i < NUM_CHANNELS; i++) {				scopes[i].update(aio.analogPin(i));			}		}	}}