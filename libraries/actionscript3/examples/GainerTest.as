package {	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;		import funnel.*;	import funnel.gui.GainerGUI;	import funnel.ui.*;	/**	 * ボタンが押されている間LEDをサイン波でドライブする。	 * Drive a LED with sin wave while the button is pressed.	 *	 * <p>準備<ol>	 * <li>aout 0にLEDを接続する（電流制限のための抵抗器が必要）</li>	 * <li>ain 0にセンサを接続する（例：ボリューム）</li>	 * </ol></p>	 *	 * <p>Preparation<ol>	 * <li>Connect a LED to aout 0 (current-limiting resistor is needed)</li>	 * <li>Connect a sensor to ain 0 (e.g. a potentiometer)</li>	 * </ol></p>	 */	public class GainerTest extends Sprite {		// To change number of analog channels, modify this constant		// 表示するアナログチャンネル数を変更するにはこの定数を変更する		private const NUM_CHANNELS:int = 1;		private var gio:Gainer;		private var scopes:Array;		public function GainerTest() {			gio = new Gainer();			gio.addEventListener(FunnelEvent.READY, trace);			gio.addEventListener(FunnelErrorEvent.REBOOT_ERROR, trace);			gio.addEventListener(FunnelErrorEvent.CONFIGURATION_ERROR, trace);			gio.addEventListener(FunnelErrorEvent.ERROR, trace);			scopes = new Array(NUM_CHANNELS);			for (var i:int = 0; i < NUM_CHANNELS; i++) {				scopes[i] = new SignalScope(0, 50 + (60 * i), 200, "ain " + i);				addChild(scopes[i]);			}			var gui:GainerGUI = new GainerGUI();			addChild(gui);			gio.gui = gui;			var externalLED:LED = new LED(gio.analogOutput(0));			gio.analogInput(0).filters = [new Convolution(MOVING_AVERAGE)];						gio.button.addEventListener(ButtonEvent.PRESS, function(e:Event):void {				gio.led.on();				externalLED.blink(1000, 0, Osc.SIN);			});			gio.button.addEventListener(ButtonEvent.RELEASE, function(e:Event):void {				gio.led.off();				externalLED.stopBlinking();			});			addEventListener(Event.ENTER_FRAME, loop);		}		private function loop(event:Event):void {			for (var i:int = 0; i < NUM_CHANNELS; i++) {				scopes[i].update(gio.analogInput(i));			}		}	}}