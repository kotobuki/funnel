package funnel.ui {	import funnel.*;	/**	 * This is the class to express a H-bridge	 * 	 * Reference	 * http://www.switch-science.com/trac/wiki/BD62xx-Basic	 * 	 * @author Shigeru Kobayashi	 */	public class HBridge {		private var _forwardPin:Pin;		private var _reversePin:Pin;		private var _value:Number = 0;		private var _offset:Number = 0;		private var _range:Number = 0;		/**		 * 		 * @param forwardPin		 * @param reversePin		 * @param minimumVoltage		 * @param maximumVoltage		 * @param supplyVoltage		 */		public function HBridge(forwardPin:Pin, reversePin:Pin, minimumVoltage:Number = 1, maximumVoltage:Number = 1.5, supplyVoltage:Number = 5) {			_forwardPin = forwardPin;			_reversePin = reversePin;			if (_forwardPin.type != PWM) {				trace("warning: PWM is not available for the forward pin");			}			if (_reversePin.type != PWM) {				trace("warning: PWM is not available for the reverse pin");			}			_offset = minimumVoltage / supplyVoltage;			_range = (maximumVoltage - minimumVoltage) / supplyVoltage;			trace("offset: " + _offset);			trace("range: " + _range);			standby();		}		/**		 * 		 * @return 		 */		public function get value():Number {			return _value;		}		/**		 * 		 * @param val		 */		public function set value(val:Number):void {			_value = Math.max(-1, Math.min(1, val));			if (val > 0) {				forward(_value);			} else if (val < 0) {				reverse(-_value)			} else {				brake();			}		}		/**		 * 		 */		public function standby():void {			_forwardPin.value = 0;			_reversePin.value = 0;			_value = 0;		}		/**		 * 		 */		public function brake():void {			_forwardPin.value = 1;			_reversePin.value = 1;			_value = 0;		}		/**		 * 		 * @param val the new voltage to set		 */		public function forward(val:Number = 1):void {			_value = Math.max(0, Math.min(1, val));			_forwardPin.value = val * _range + _offset;			_reversePin.value = 0;			_value = val;		}		/**		 * 		 * @param val the new voltage to set		 */		public function reverse(val:Number = 1):void {			_value = Math.max(0, Math.min(1, val));			_forwardPin.value = 0;			_reversePin.value = _offset - val * _range;			_value = -1 * val;		}	}}