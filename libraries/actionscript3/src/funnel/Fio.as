package funnel {	import flash.events.TimerEvent;	import flash.utils.Timer;	/**	 * A class to handle Funnel IO modules.	 * 	 * <p>FioクラスはFunnel I/Oモジュールを扱うためのクラスです。</p>	 *	 */	public class Fio extends IOSystem {		/**		 * Represents all of the connected Fio modules. Example, to set the value of pin 10 for		 * all connected Fio modules: fio.module(All).pin(10).value = x.		 * 		 * <p>全てのモジュールを表します。fio.module(ALL).pin(10).value = xのようにすることで、全モジュールの10番目のピンの値をxに設定します。</p>		 */		public static const ALL:uint = 0xFFFF;		/**		 * Get the default Fio configuration		 * 		 * <p>Fio用のデフォルトのコンフィギュレーションを取得します。</p>		 * @return Configuration object		 */		public static function get FIRMATA():Configuration {			var k:Configuration = new Configuration();			k.config = [DOUT, DOUT, DOUT, AOUT, DOUT, AOUT, AOUT, DOUT, DOUT, AOUT, AOUT, AOUT, DOUT, DOUT, AIN, AIN, AIN, AIN, AIN, AIN, AIN, AIN];			k.analogPins = [14, 15, 16, 17, 18, 19, 20, 21];			k.digitalPins = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21];			return k;		}		/**		 * @param nodes an array of IDs for the connected Fio modules		 * @param config Configuration		 * @param host host number		 * @param portNum port number		 * @param samplingInterval sampling interval in milliseconds		 */		public function Fio(nodes:Array = null, config:Configuration = null, host:String = "localhost", portNum:Number = 9000, samplingInterval:int = 33) {			if (nodes == null)				nodes = [];			if (config == null)				config = Fio.FIRMATA;			nodes.push(ALL);			var configs:Array = [];			var id:uint = 0;			for each (id in nodes) {				var c:Configuration = config.clone();				c.moduleID = id;				configs.push(c);			}			super(configs, host, portNum, samplingInterval);			for (var i:int = 0; i < config.config.length; i++) {				if (config.config[i] == SERVO) {					for each (id in nodes) {						ioModule(i).setServoPulseRange(i, 544, 2400);					}				}			}			if (config.powerPinsEnabled) {				var timer:Timer = new Timer(I2C_POWER_PINS_STARTUP_TIME, 1);				timer.addEventListener(TimerEvent.TIMER_COMPLETE, function(e:TimerEvent):void {						dispatchEvent(new FunnelEvent(FunnelEvent.I2C_POWER_PINS_READY));					});				timer.start();			}		}	}}