package {	import flash.display.Sprite;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFieldAutoSize;	import funnel.*;	/**	 * 入力の状態を表示するためのスコープクラス	 * A signal scope class to show changes of inputs.	 */	public class SignalScope extends Sprite {		private var values:Array;		private var descriptionLabel:TextField;		private var currentValueText:TextField;		private var maximumValueText:TextField;		private var minimumValueText:TextField;		private var averageValueText:TextField;		private const CUR_VAL_COLOR:uint = 0xFFFFFF;		private const MAX_VAL_COLOR:uint = 0xFF5A00;		private const MIN_VAL_COLOR:uint = 0x00D42D;		private const AVG_VAL_COLOR:uint = 0xFFE000;		public function SignalScope(x:Number, y:Number, points:int, description:String = "") {			super();			this.x = x;			this.y = y;			this.values = new Array(points);			for (var i:int = 0; i < values.length; i++) {				values[i] = 0.0;			}			var format:TextFormat = new TextFormat();			format.font = "Monaco";			format.size = 12;			currentValueText = new TextField();			maximumValueText = new TextField();			minimumValueText = new TextField();			averageValueText = new TextField();			descriptionLabel = new TextField();			format.color = CUR_VAL_COLOR;			currentValueText.defaultTextFormat = format;			currentValueText.width = 102;			format.color = MAX_VAL_COLOR;			maximumValueText.defaultTextFormat = format;			maximumValueText.width = 102;			format.color = MIN_VAL_COLOR;			minimumValueText.defaultTextFormat = format;			minimumValueText.width = 102;			format.color = AVG_VAL_COLOR;			averageValueText.defaultTextFormat = format;			averageValueText.width = 102;			format.color = CUR_VAL_COLOR;			descriptionLabel.defaultTextFormat = format;			descriptionLabel.autoSize = TextFieldAutoSize.LEFT;			currentValueText.text = "current: 0.0";			maximumValueText.text = "maximum: 0.0";			minimumValueText.text = "minimum: 0.0";			averageValueText.text = "average: 0.0";			descriptionLabel.text = description;			currentValueText.x = x + 210;			currentValueText.y = y + 32 - 4;			maximumValueText.x = x + 210;			maximumValueText.y = y + 48 - 4;			minimumValueText.x = x + 210;			minimumValueText.y = y + 64 - 4;			averageValueText.x = x + 210;			averageValueText.y = y + 80 - 4;			descriptionLabel.x = x + 210;			descriptionLabel.y = y + 0 - 4;			addChild(currentValueText);			addChild(maximumValueText);			addChild(minimumValueText);			addChild(averageValueText);			addChild(descriptionLabel);		}		public function update(pin:Pin):void {			this.graphics.clear();			this.graphics.lineStyle(0.25, CUR_VAL_COLOR);			this.graphics.drawRect(x - 2, y - 2, values.length + 4, 100 + 4);			this.graphics.lineStyle(0.5, CUR_VAL_COLOR);			this.graphics.moveTo(x, y + 100);			values.push(pin.value);			values.shift();			var offset:Number = 0;			for (var i:int = 0; i < values.length; i++) {				offset = (1 - values[i]) * 100;				this.graphics.lineTo(x + i, y + offset);			}			offset = (1 - pin.maximum) * 100;			this.graphics.lineStyle(0.25, MAX_VAL_COLOR);			this.graphics.moveTo(x, y + offset);			this.graphics.lineTo(x + values.length, y + offset);			offset = (1 - pin.minimum) * 100;			this.graphics.lineStyle(0.25, MIN_VAL_COLOR);			this.graphics.moveTo(x, y + offset);			this.graphics.lineTo(x + values.length, y + offset);			offset = (1 - pin.average) * 100;			this.graphics.lineStyle(0.25, AVG_VAL_COLOR);			this.graphics.moveTo(x, y + offset);			this.graphics.lineTo(x + values.length, y + offset);			currentValueText.text = "current: " + pin.value;			maximumValueText.text = "maximum: " + pin.maximum;			minimumValueText.text = "minimum: " + pin.minimum;			averageValueText.text = "average: " + pin.average;		}	}}