package funnel {	import flash.events.Event;		import funnel.gui.IOModuleGUI;	import funnel.osc.*;	/**	 * PCに接続されたI/Oモジュールを抽象化して共通の方法でアクセスするためのクラスです。	 *	 */	public class IOModule {		public static const COMMAND_OFFSET_MULTIPLIER:uint = 128;		public static const SERVO_CONFIG:uint = 0x70;		public static const FIRMATA_STRING:uint = 0x71;		private var _config:Configuration;		private var _id:uint;		private var _ioPins:Array;		private var _pinCount:uint;		private var _sysexListeners:Array;		private var _system:IOSystem;		private var _updatedValues:Array;		private var _gui:IOModuleGUI;		/**		 *		 * @param system FunnelServerと通信をするIOSystemオブジェクト		 * @param id IOModuleオブジェクトのID		 * @param configuration コンフィギュレーション		 *		 */		public function IOModule(system:IOSystem, configuration:Configuration) {			_system = system;			_system.addEventListener(Event.CONNECT, onSocketConnect);			_config = configuration;			_id = configuration.moduleID;			_gui = null;			var pinTypes:Array = _config.config;			_pinCount = pinTypes.length;			_ioPins = new Array(_pinCount);			_updatedValues = new Array(_pinCount);			for (var i:uint = 0; i < _pinCount; ++i) {				var aPin:Pin = new Pin(i, pinTypes[i]);				var type:uint = aPin.type;				if (type == Pin.AOUT || type == Pin.DOUT || type == Pin.SERVO) {					aPin.addEventListener(PinEvent.CHANGE, handleChange);				}				_ioPins[i] = aPin;			}			_sysexListeners = new Array();		}		public function set gui(gui:IOModuleGUI):void {			_gui = gui;			_gui.configure(_id, _config);			_gui.addEventListener(Event.CHANGE, onReceiveInputFromGUI);			_system.addEventListener(FunnelEvent.READY, _gui.onReady);			_system.addEventListener(FunnelErrorEvent.CONFIGURATION_ERROR, _gui.onConfigurationError);			_system.addEventListener(FunnelErrorEvent.ERROR, _gui.onError);			_system.addEventListener(FunnelErrorEvent.REBOOT_ERROR, _gui.onRebootError);		}		public function get gui():IOModuleGUI {			return _gui;		}		public function addSysexListener(listener:*):void {			if (!listener is ISysexMessageListener)				throw new ArgumentError("the listener should implement ISysexMessageListener");			_sysexListeners[listener.command] = listener;		}		/**		 * pinNumで指定したアナログピンのPinオブジェクトを取得します。		 * @param pinNum アナログピン番号		 * @return Pinオブジェクト		 * @see Pin		 */		public function analogPin(pinNum:uint):Pin {			if (_config.analogPins == null)				throw new ArgumentError("analog pins are not available");			if (_config.analogPins[pinNum] == null)				throw new ArgumentError("analog pin is not available at " + pinNum);			return _ioPins[_config.analogPins[pinNum]];		}		public function get configuration():Configuration {			return _config;		}		/**		 * pinNumで指定したデジタルピンのPinオブジェクトを取得します。		 * @param pinNum デジタルピン番号		 * @return Pinオブジェクト		 * @see Pin		 */		public function digitalPin(pinNum:uint):Pin {			if (_config.digitalPins == null)				throw new ArgumentError("digital pins are not available");			if (_config.digitalPins[pinNum] == null)				throw new ArgumentError("digital pin is not available at " + pinNum);			return _ioPins[_config.digitalPins[pinNum]];		}		public function handleInput(data:Array):void {			var startPinNum:uint = data[0].value;			for (var j:uint = 0; j < data.length - 1; ++j) {				var aPin:Pin = _ioPins[startPinNum + j];				var type:uint = aPin.type;				if (type == Pin.AIN || type == Pin.DIN) {					aPin.value = data[j + 1].value;					if (_gui != null) {						_gui.setValue(aPin.number, aPin.value);					}				}			}		}		private function onReceiveInputFromGUI(event:Event):void {			var gui:IOModuleGUI = event.target as IOModuleGUI;			var message:OSCMessage = gui.inputMessage;			var pinValues:Array = message.value;			var startPinNum:uint = pinValues[1].value;			for (var j:uint = 0; j < pinValues.length - 2; ++j) {				var aPin:Pin = _ioPins[startPinNum + j];				var type:uint = aPin.type;				if (type == Pin.AIN || type == Pin.DIN) {					aPin.value = pinValues[j + 2].value;				}			}		}		public function handleSysex(command:uint, data:Array):void {			if (command == FIRMATA_STRING) {				if (_sysexListeners[FIRMATA_STRING] != null) {					_sysexListeners[FIRMATA_STRING].handleSysex(command, data);				} else {					trace("Firmata String (from " + _id + "): " + data[0]);				}			} else if (_sysexListeners[COMMAND_OFFSET_MULTIPLIER * (command + 2) + int(data[0])] != null) {				_sysexListeners[COMMAND_OFFSET_MULTIPLIER * (command + 2) + int(data[0])].handleSysex(command, data);			} else if (_sysexListeners[command] != null) {				_sysexListeners[command].handleSysex(command, data);			}		}		public function get id():uint {			return _id;		}		/**		 * pinNumで指定したPinオブジェクトを取得します。		 * @param pinNum ピン番号		 * @return Pinオブジェクト		 * @see Pin		 */		public function pin(pinNum:uint):Pin {			return _ioPins[pinNum];		}		/**		 * @return ピン数		 *		 */		public function get pinCount():uint {			return _pinCount;		}		public function sendFirmataString(stringToSend:String):void {			var arrayToSend:Array = new Array();			for (var i:uint = 0; i < stringToSend.length; i++) {				arrayToSend.push(stringToSend.charCodeAt(i));			}			// terminate string			arrayToSend.push(0x00);			sendSysex(FIRMATA_STRING, arrayToSend);		}		/**		 * @param pinNumber the servo pin number to set		 * @param minPulseWidth the minimum pulse width in microseconds (default = 544us)		 * @param maxPulseWidth the maximum pulse width in microseconds (default = 2400us)		 * 		 * @throws ArgumentError		 */		public function setServoPulseRange(pinNumber:uint, minPulseWidth:uint, maxPulseWidth:uint):void {			if (pin(pinNumber).type != Pin.SERVO) {				throw new ArgumentError("the pin (" + pinNumber + ") is not configured as a servo pin");			}			_system.sendSysex(_id, SERVO_CONFIG, [pinNumber, minPulseWidth, maxPulseWidth]);		}		public function sendSysex(command:uint, message:Array):void {			_system.sendSysex(_id, command, message);		}		/**		 * @private		 *		 */		internal function update():void {			var value:Number;			var adjoiningValues:Array;			var startIndex:uint;			for (var i:uint = 0; i < _pinCount; ++i) {				if (_updatedValues[i] != null) {					if (adjoiningValues == null) {						adjoiningValues = [];						startIndex = i;					}					adjoiningValues.push(_updatedValues[i]);					_updatedValues[i] = null;				} else if (adjoiningValues != null) {					sendOut(startIndex, adjoiningValues);					adjoiningValues = null;				}			}			if (adjoiningValues != null) {				sendOut(startIndex, adjoiningValues);			}		}		private function handleChange(event:PinEvent):void {			var pin:Pin = event.target as Pin;			var index:uint = pin.number;			if (_system.autoUpdate) {				sendOut(index, [pin.value]);			} else {				_updatedValues[index] = pin.value;			}		}		private function sendOut(startPinNum:uint, pinValues:Array):void {			_system.sendOut(_id, startPinNum, pinValues);			if (_gui != null) {				_gui.handleOutputs(startPinNum, pinValues);			}		}		private function onSocketConnect(e:Event):void {			if (_gui != null) {				_gui.removeEventListener(Event.CHANGE, onReceiveInputFromGUI);			}		}	}}